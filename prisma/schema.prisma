generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  role          ROLE      @default(USER)
  name          String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  tags Tag[]
  nodo Todo[]
  note Note[]

  @@map("users")
}

model Todo {
  id             String   @id @default(cuid())
  text           String
  complete       Boolean  @default(false)
  dateToComplete DateTime
  userId         String   @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags           Tag[]    @relation("TodoTags")

  @@map("todos")
}

model Note {
  id          String   @id @default(cuid())
  title       String
  text        String
  dateCreated DateTime @default(now())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]    @relation("NoteTags")

  @@map("notes")
}

model Tag {
  id     String @id @default(cuid())
  name   String @unique
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos  Todo[] @relation("TodoTags")
  notes  Note[] @relation("NoteTags")

  @@map("tags")
}

enum ROLE {
  ADMIN
  USER
}
